name: "Testflight Deploy"

on:
  #  workflow 를 trigger 조건 설정 - release/ 로 시작하는 branch 가 push 되었을 때 
  push:
    branches: [ release/* ]
    
jobs:
  deploy:
    runs-on: macos-latest
    env:
      # app archive 및 export 에 쓰일 환경 변수 설정
      XC_PROJECT: ${{ 'Favor/Favor.xcodeproj' }}
      XC_SCHEME: ${{ 'Favor' }}
      XC_ARCHIVE: ${{ 'Favor.xcarchive' }}
      XC_IPA: ${{ 'Favor.ipa' }}
      
      # certificate 
      ENCRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/certificate.p12.gpg' }}
      DECRYPTED_CERT_FILE_PATH: ${{ '.github/secrets/certificate.p12' }}
      CERT_ENCRYPTION_KEY: ${{ secrets.CERTS_ENCRYPTION_PW }} # gpg로 파일 암호화할 때 사용한 암호
      
      # provisioning
      ENCRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/Favor_GitHubActions_Deploy.mobileprovision.gpg' }}
      DECRYPTED_PROVISION_FILE_PATH: ${{ '.github/secrets/Favor_GitHubActions_Deploy.mobileprovision' }}
      PROVISIONING_ENCRYPTION_KEY: ${{ secrets.PROVISION_ENCRYPTION_PW }} # gpg로 파일 암호화할 때 사용한 암호
      
      # certification export key
      CERT_EXPORT_KEY: ${{ secrets.CERT_EXPORT_PW }}
      
      KEYCHAIN: ${{ 'test.keychain' }}
      
    steps:
      - name: Select latest Xcode
        # shell 이용해서 하나의 command 수행
        run: "sudo xcode-select -s /Applications/Xcode.app"
      - name: Checkout project
        # uses 키워드를 통해 Github Actions에서 기본으로 제공하는 액션을 사용 가능. 아래 액션은 repository 에 체크아웃하는 것
        uses: actions/checkout@v2
      - name: Create secret file
        env:
          API_SECRET: ${{ secrets.API_SECRET }}
          TERM_SECRET: ${{ secrets.TERM_SECRET }}
          AUTHKEY_SECRET: ${{ secrets.APPSTORE_AUTHKEY }}
        run: |
          echo $API_SECRET | base64 -D -o ${{ env.XC_SCHEME }}/${{ env.XC_SCHEME }}NetworkKit/Sources/${{ env.XC_SCHEME }}NetworkKit/API-Info.plist
          echo $TERM_SECRET | base64 -D -o ${{ env.XC_SCHEME }}/${{ env.XC_SCHEME }}/Term-Info.plist
          mkdir ~/.private_keys/
          echo $AUTHKEY_SECRET | base64 -D -o ~/.private_keys/AuthKey_${{ secrets.APPSTORE_API_KEY_ID }}.p8
          ls -al ${{ env.XC_SCHEME }}
      - name: Configure Keychain 
        # 키체인 초기화 - 임시 키체인 생성
        run: |
          security create-keychain -p "" "$KEYCHAIN"
          security list-keychains -s "$KEYCHAIN"
          security default-keychain -s "$KEYCHAIN"
          security unlock-keychain -p "" "$KEYCHAIN"
          security set-keychain-settings
      - name : Configure Code Signing
        run: |
          # certificate 복호화
          gpg -d -o "$DECRYPTED_CERT_FILE_PATH" --pinentry-mode=loopback --passphrase "$CERT_ENCRYPTION_KEY" "$ENCRYPTED_CERT_FILE_PATH"
          # provisioning 복호화
          gpg -d -o "$DECRYPTED_PROVISION_FILE_PATH" --pinentry-mode=loopback --passphrase "$PROVISIONING_ENCRYPTION_KEY" "$ENCRYPTED_PROVISION_FILE_PATH"
          
          # security를 사용하여 인증서와 개인 키를 새로 만든 키 체인으로 가져옴
          security import "$DECRYPTED_CERT_FILE_PATH" -k "$KEYCHAIN" -P "$CERT_EXPORT_KEY" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" "$KEYCHAIN"
          
          # Xcode에서 찾을 수 있는 프로비저닝 프로필 설치하기 위해 우선 프로비저닝 디렉토리를 생성
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          # 디버깅 용 echo 명령어
          echo `ls .github/secrets/*.mobileprovision`
            # 모든 프로비저닝 프로파일을 rename 하고 위에서 만든 디렉토리로 복사하는 과정
            for PROVISION in `ls .github/secrets/*.mobileprovision`
            do
              UUID=`/usr/libexec/PlistBuddy -c 'Print :UUID' /dev/stdin <<< $(security cms -D -i ./$PROVISION)`
            cp "./$PROVISION" "$HOME/Library/MobileDevice/Provisioning Profiles/$UUID.mobileprovision"
          done
      - name: Archive app
        # 빌드 및 아카이브
        run: |
          # pod install --repo-update --clean-install --project-directory=Favor/
          xcodebuild clean archive -project $XC_PROJECT -scheme $XC_SCHEME -configuration release -archivePath $XC_ARCHIVE
      - name: Export app
        # export 를 통해 ipa 파일 만듦
        run: |
          xcodebuild -exportArchive -archivePath $XC_ARCHIVE -exportOptionsPlist ExportOptions.plist -exportPath . -allowProvisioningUpdates
          ls -al
          ls -al ~/.private_keys
      - name: Upload app to TestFlight
        env:
          APPSTORE_API_KEY: ${{ secrets.APPSTORE_API_KEY_ID }}
          APPSTORE_ISSUER: ${{ secrets.APPSTORE_ISSUER_ID }}
        run: |
          xcrun altool --upload-app -f $XC_IPA --type ios --apiKey $APPSTORE_API_KEY --apiIssuer $APPSTORE_ISSUER
          
# ref: https://sujinnaljin.medium.com/ci-cd-github-actions-%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%9C-testflight-%EC%97%85%EB%A1%9C%EB%93%9C-%EC%9E%90%EB%8F%99%ED%99%94-8ecdbeb227a3
